# Sample data for more than 100 rows
table_data = [
    {"col1": f"Row {i} Data 1", "col2": f"Row {i} Data 2", "url": f"https://example.com/signed-url-{i}"}
    for i in range(1, 101)  # Generating 100 rows as an example
]

# HTML template with placeholders for the rows
html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Table with Signed URLs</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }}
        th, td {{
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:hover {{
            background-color: #f5f5f5;
        }}
        .signed-url {{
            color: #007BFF;
            text-decoration: none;
        }}
        .signed-url:hover {{
            text-decoration: underline;
        }}
    </style>
</head>
<body>

    <h2>Dynamic Table with Signed URLs</h2>

    <table>
        <thead>
            <tr>
                <th>Column 1</th>
                <th>Column 2</th>
                <th>Column 3 (Signed URL)</th>
            </tr>
        </thead>
        <tbody>
            {table_rows}
        </tbody>
    </table>

</body>
</html>
"""

# Function to generate rows in HTML format
def generate_table_rows(data):
    rows = ""
    for entry in data:
        row = f"""
        <tr>
            <td>{entry['col1']}</td>
            <td>{entry['col2']}</td>
            <td><a href="{entry['url']}" class="signed-url">Signed URL</a></td>
        </tr>
        """
        rows += row
    return rows

# Generate the table rows from the data
table_rows_html = generate_table_rows(table_data)

# Format the HTML template with the generated rows
html_output = html_template.format(table_rows=table_rows_html)

# Write the HTML output to a file
with open("table_with_signed_urls.html", "w") as f:
    f.write(html_output)

print("HTML file generated successfully.")

